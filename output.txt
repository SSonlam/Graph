===================================================================
Recommended Usage: ./simplecompile.sh > output.txt 2>&1
===================================================================
Mon Feb 10 23:31:00 PST 2020
Linux uw1-320-07 4.9.0-9-amd64 #1 SMP Debian 4.9.168-1+deb9u5 (2019-08-11) x86_64 GNU/Linux
uid=863755(ssonlam) gid=2120863755(ssonlam) groups=2120863755(ssonlam),605559(lab-access)
===================================================================
*** compiling with clang++ to create an executable called myprogram
===================================================================
clang version 3.8.1-24 (tags/RELEASE_381/final)
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
===================================================================
*** running myprogram
testGraph0DFS
testGraph0BFS
testGraph0Dijkstra
this is tester1Dijkstra(A) weights is [B:1][C:4]
Dijkstra(A) previous is [B:A][C:B]
testGraph1
Done!
===================================================================
*** running clang-tidy using options from .clang-tidy
*** fix all warnings, modify .clang-tidy if necessary
*** explain all changes to .clang-tidy in README
LLVM (http://llvm.org/):
  LLVM version 3.8.1
  
  Optimized build.
  Built Jun  2 2017 (13:11:29).
  Default target: x86_64-pc-linux-gnu
  Host CPU: ivybridge
7077 warnings generated.
27413 warnings generated.
42971 warnings generated.
53474 warnings generated.
63637 warnings generated.
/home/NETID/ssonlam/graph.cpp:20:5: warning: use range-based for loop instead [modernize-loop-convert]
    for (int I = 0; I < ALPHABETSIZE; I++) {
    ^
/home/NETID/ssonlam/graph.cpp:29:5: warning: use range-based for loop instead [modernize-loop-convert]
    for (int I = 0; I < VertexVector.size(); I++) {
    ^
/home/NETID/ssonlam/graph.cpp:32:5: warning: use range-based for loop instead [modernize-loop-convert]
    for (int I = 0; I < EdgeVector.size(); I++) {
    ^
/home/NETID/ssonlam/graph.cpp:53:39: warning: redundant boolean literal supplied to boolean operator [readability-simplify-boolean-expr]
        if (this->DirectionalEdges == false) {
                                      ^
            !this->DirectionalEdges
/home/NETID/ssonlam/graph.cpp:71:5: warning: use range-based for loop instead [modernize-loop-convert]
    for (int I = 0; I < ALPHABETSIZE; I++) {
    ^
/home/NETID/ssonlam/graph.cpp:106:16: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
        return false;
               ^
/home/NETID/ssonlam/graph.cpp:154:9: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
        Edge* EdgeAdded = new Edge(VertexMap[To], Weight);
        ^
        auto 
/home/NETID/ssonlam/graph.cpp:175:35: warning: redundant boolean literal supplied to boolean operator [readability-simplify-boolean-expr]
    if (this->DirectionalEdges == false) {
                                  ^
        !this->DirectionalEdges
/home/NETID/ssonlam/graph.cpp:214:9: warning: use range-based for loop instead [modernize-loop-convert]
        for (int I = 0; I < Temp->Neighbors.size(); I++) {
        ^
note: this fix will not be applied because it overlaps with another fix
/home/NETID/ssonlam/graph.cpp:215:50: warning: redundant boolean literal supplied to boolean operator [readability-simplify-boolean-expr]
            if (Temp->Neighbors[I]->IsVisited == false) {
                                                 ^
                !Temp->Neighbors[I]->IsVisited
/home/NETID/ssonlam/graph.cpp:223:13: warning: use range-based for loop instead [modernize-loop-convert]
            for (int I = 0; I < Temp->Neighbors.size(); I++) {
            ^
note: this fix will not be applied because it overlaps with another fix
/home/NETID/ssonlam/graph.cpp:224:54: warning: redundant boolean literal supplied to boolean operator [readability-simplify-boolean-expr]
                if (Temp->Neighbors[I]->IsVisited == false) {
                                                     ^
                    !Temp->Neighbors[I]->IsVisited
/home/NETID/ssonlam/graph.cpp:248:9: warning: use range-based for loop instead [modernize-loop-convert]
        for (int I = 0; I < Temp->Neighbors.size(); I++) {
        ^
note: this fix will not be applied because it overlaps with another fix
/home/NETID/ssonlam/graph.cpp:249:50: warning: redundant boolean literal supplied to boolean operator [readability-simplify-boolean-expr]
            if (Temp->Neighbors[I]->IsVisited == false) {
                                                 ^
                !Temp->Neighbors[I]->IsVisited
/home/NETID/ssonlam/graph.cpp:259:5: warning: use range-based for loop instead [modernize-loop-convert]
    for (int I = 0; I < VertexVector.size(); I++) {
    ^
/home/NETID/ssonlam/graph.cpp:270:26: warning: redundant boolean literal supplied to boolean operator [readability-simplify-boolean-expr]
        if (SptSet[V] == false && Distance[V] <= Minimum) {
                         ^
            !SptSet[V]
/home/NETID/ssonlam/graph.cpp:285:26: warning: redundant boolean literal supplied to boolean operator [readability-simplify-boolean-expr]
        if (SptSet[V] == false && Distance[V] < Minimum) {
                         ^
            !SptSet[V]
/home/NETID/ssonlam/graph.cpp:330:31: warning: implicit cast 'int' -> bool [readability-implicit-bool-cast]
            if (!SptSet[V] && AdjMatrix[U][V] && Distance[U] != INT_MAX
                              ^
                              (               != 0)
/home/NETID/ssonlam/graph.h:76:9: warning: function 'Graph::minDistance' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
    int minDistance(int Dist[], bool SptSet[]);
        ^
                        Distance
/home/NETID/ssonlam/graph.cpp:263:12: note: the definition seen here
int Graph::minDistance(int Distance[], bool SptSet[])
           ^
/home/NETID/ssonlam/graph.h:76:9: note: differing parameters are named here: ('Dist'), in definition: ('Distance')
    int minDistance(int Dist[], bool SptSet[]);
        ^
/home/NETID/ssonlam/graph.h:91:23: warning: invalid case style for parameter 'parent' [readability-identifier-naming]
    void printMST(int parent[]);
                      ^
                      Parent
/home/NETID/ssonlam/graph.h:91:23: warning: invalid case style for parameter 'parent' [readability-identifier-naming]
    void printMST(int parent[]);
                      ^
                      Parent
/home/NETID/ssonlam/vertex.cpp:44:1: warning: use '= default' to define a trivial destructor [modernize-use-default]
Vertex::~Vertex(){}
^
                 = default;
Suppressed 63615 warnings (63615 in non-user code).
Use -header-filter=.* to display errors from all non-system headers.
===================================================================
*** ERROR clang-format is not available on this system
===================================================================
*** running valgrind to detect memory leaks
==2903==     in use at exit: 0 bytes in 0 blocks
===================================================================
*** compiling with clang++ to checking for memory leaks
===================================================================
*** running myprogram with memory checking
testGraph0DFS
testGraph0BFS
testGraph0Dijkstra
this is tester1Dijkstra(A) weights is [B:1][C:4]
Dijkstra(A) previous is [B:A][C:B]
testGraph1
Done!
===================================================================
*** using --analyze option for clang++ to detect issues
===================================================================
*** cleaning up, deleting myprogram, myprogram.dSYM and core
===================================================================
Mon Feb 10 23:31:17 PST 2020
===================================================================
./simplecompile.sh exiting with 0
